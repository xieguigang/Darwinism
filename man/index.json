{"container_id":{"author":null,"declares":{"name":"container_id","parameters":[],"sourceMap":{"File":"docker.R","Line":"7","Method":{"Method":"container_id","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[],"returns":"this function returns a character vector of the current\r\ndocker container id if script process is running inside a docker\r\ncontainer environment, or nothing if not.","see_also":"","title":"check of the script is running inside a docker container or not?"},"run_rlang_interop":{"author":null,"declares":{"name":"run_rlang_interop","parameters":[{"name":"code","text":null},{"name":"image","text":null},{"name":"source","text":"NULL"},{"name":"debug","text":"FALSE"},{"name":"workdir","text":"NULL"},{"name":"mount","text":"'list'()"}],"sourceMap":{"File":"docker.R","Line":"40","Method":{"Method":"run_rlang_interop","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[{"name":"code","text":"a R# closure code for run in the target docker container"},{"name":"image","text":"the docker image id for run Rscript interop"},{"name":"mount","text":"the volumn for mount in the target docker container"}],"returns":null,"see_also":"","title":"Interop run rscript in a docker container"},"__rscript_tmp":{"author":null,"declares":{"name":"__rscript_tmp","parameters":[{"name":"workdir","text":null}],"sourceMap":{"File":"docker.R","Line":"53","Method":{"Method":"__rscript_tmp","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"__rscript_tmp"},"__call_rscript_docker":{"author":null,"declares":{"name":"__call_rscript_docker","parameters":[{"name":"image.id","text":null},{"name":"script.code","text":null},{"name":"workdir","text":null},{"name":"mount","text":null},{"name":"debug","text":"FALSE"}],"sourceMap":{"File":"docker.R","Line":"75","Method":{"Method":"__call_rscript_docker","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[{"name":"script_code","text":"a text data of the script for run"},{"name":"image","text":"the docker image id for run in the docker."}],"returns":null,"see_also":"","title":"A helper function for run Rscript inside a docker container"},"___config_runtime_env":{"author":null,"declares":{"name":"___config_runtime_env","parameters":[],"sourceMap":{"File":"env.R","Line":"4","Method":{"Method":"___config_runtime_env","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"___config_runtime_env"},"___check_netstat":{"author":null,"declares":{"name":"___check_netstat","parameters":[],"sourceMap":{"File":"env.R","Line":"13","Method":{"Method":"___check_netstat","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"this function only works for linux platform","examples":"","keywords":[],"parameters":[],"returns":null,"see_also":"","title":"Check of netstat tool is installed or not"},"no_netstat_warning":{"author":null,"declares":{"name":"no_netstat_warning","parameters":[],"sourceMap":{"File":"env.R","Line":"28","Method":{"Method":"no_netstat_warning","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"create a slave task via ``IPCSocket`` needs check of the\r\nassigned port number locally, for windows system, win32 api could\r\nbe used for this job; for unix system, the ``netstat`` command will\r\nbe used for check this status data.","examples":"","keywords":[],"parameters":[],"returns":null,"see_also":"","title":"show warning message about missing ``netstat`` command"},"hardware_abstract":{"author":null,"declares":{"name":"hardware_abstract","parameters":[{"name":"verbose","text":"TRUE"}],"sourceMap":{"File":"env.R","Line":"64","Method":{"Method":"hardware_abstract","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"This function retrieves key hardware information from the system, including CPU details\r\nand MAC addresses of network interfaces. It provides both raw data and a structured summary.","details":"","examples":"#\\dontrun{\r\n\r\nhardware_info <- hardware_abstract()\r\nstr(hardware_info)\r\n\r\n#}","keywords":[],"parameters":[{"name":"verbose","text":"Logical. If TRUE (default), prints detailed system information to console."}],"returns":"A list containing three components:\r\n\\itemize{\r\n\\item \\strong{cpuinfo}: Character vector of CPU model names (one per thread)\r\n\\item \\strong{threads}: Integer count of logical processors\/threads\r\n\\item \\strong{mac_list}: List of non-empty MAC addresses for network interfaces\r\n}","see_also":"","title":"Get Platform Hardware Abstract Report"},"get_mac_addresses":{"author":null,"declares":{"name":"get_mac_addresses","parameters":[],"sourceMap":{"File":"env.R","Line":"148","Method":{"Method":"get_mac_addresses","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Scans system network interfaces and extracts MAC addresses, excluding loopback interfaces.","details":"","examples":"#\\dontrun{\r\n\r\nmacs <- get_mac_addresses()\r\n\r\n#}","keywords":[],"parameters":[],"returns":"A named list where:\r\n\\itemize{\r\n\\item Names are network interface names (e.g., \"eth0\")\r\n\\item Values are corresponding MAC addresses (empty string if unavailable)\r\n}","see_also":"","title":"Retrieve MAC Addresses of Network Interfaces"},"hardware_sign":{"author":null,"declares":{"name":"hardware_sign","parameters":[{"name":"salt","text":"''"},{"name":"salt.bytes","text":"NULL"},{"name":"verbose","text":"FALSE"}],"sourceMap":{"File":"env.R","Line":"195","Method":{"Method":"hardware_sign","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"Creates unique MD5 checksums based on system hardware characteristics and optional salt.\r\nSignatures are MAC-address specific, generating one checksum per network interface.","details":"","examples":"#\\dontrun{\r\n\r\nsignatures <- hardware_sign(salt = \"user@example.com\")\r\n\r\n#}","keywords":[],"parameters":[{"name":"salt","text":"Character string (typically user email) to add entropy to signatures."},{"name":"salt_bytes","text":"Optional raw bytes as additional salt. Will be MD5-hashed if provided."},{"name":"verbose","text":"Logical. Show debug information during generation (default: FALSE)."}],"returns":"Character vector of MD5 checksums:\r\n\\itemize{\r\n\\item Length matches number of valid network interfaces\r\n\\item Order corresponds to interfaces returned by get_mac_addresses()\r\n\\item Each checksum incorporates hardware profile + MAC address + salt(s)\r\n}","see_also":"\\code{\\link{hardware_abstract}} for underlying hardware data collection","title":"Generate Hardware-based Digital Signatures"},"hardware_keys":{"author":null,"declares":{"name":"hardware_keys","parameters":[{"name":"salt","text":"''"},{"name":"salt.bytes","text":"NULL"},{"name":"verbose","text":"FALSE"}],"sourceMap":{"File":"env.R","Line":"219","Method":{"Method":"hardware_keys","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[{"name":"salt_bytes","text":"an integer array"}],"returns":null,"see_also":"","title":"get and print the generated hardware keys"},".onLoad":{"author":null,"declares":{"name":".onLoad","parameters":[],"sourceMap":{"File":"zzz.R","Line":"1","Method":{"Method":".onLoad","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":".onLoad"}}